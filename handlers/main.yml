---

- name: Remount tmp
  ansible.posix.mount:
      name: /tmp
      state: remounted

- name: remount dev_shm
  ansible.posix.mount:
      name: /dev/shm
      state: remounted

- name: Remount var
  ansible.posix.mount:
      name: /var
      state: remounted

- name: Remount var_tmp
  ansible.posix.mount:
      name: /var/tmp
      state: remounted

- name: Remount var_log
  ansible.posix.mount:
      name: /var/log
      state: remounted

- name: Remount var_log_audit
  ansible.posix.mount:
      name: /var/log/audit
      state: remounted

- name: Remount home
  ansible.posix.mount:
      name: /home
      state: remounted

- name: Grub update
  ansible.builtin.shell: update-grub
  notify: change_requires_reboot
  failed_when: false

- name: reload gdm3
  ansible.builtin.shell: dpkg-reconfigure gdm3
  failed_when: false

- name: restart postfix
  ansible.builtin.systemd:
      name: postfix
      state: restarted

- name: restart exim4
  ansible.builtin.systemd:
      name: exim4
      state: restarted

- name: restart timeservice
  ansible.builtin.systemd:
      name: "{{ ubtu20cis_time_sync_tool }}"
      state: restarted
# ---------------
# ---------------
# This is not a control however using the iptables module only writes to memory
# if a reboot occurs that means changes can revert. This task will make the
# above iptables settings permanent
#
# This is also idempotent as a handler
# ---------------
# ---------------

- name: persistent ip4tables
  ansible.builtin.shell: bash -c "iptables-save > /etc/iptables/rules.v4"
  changed_when: ubtu20cis_iptables_save.rc == 0
  failed_when: ubtu20cis_iptables_save.rc > 0
  register: ubtu20cis_iptables_save

- name: persistent ip6tables
  ansible.builtin.shell: bash -c "ip6tables-save > /etc/iptables/rules.v6"
  changed_when: ubtu20cis_ip6tables_save.rc == 0
  failed_when: ubtu20cis_ip6tables_save.rc > 0
  register: ubtu20cis_ip6tables_save

########

- name: sysctl flush ipv4 route table
  ansible.posix.sysctl:
      name: net.ipv4.route.flush
      value: '1'
      sysctl_set: true
  when: ansible_virtualization_type != "docker"

- name: reload ufw
  community.general.ufw:
      state: reloaded

- name: sysctl flush ipv6 route table
  ansible.posix.sysctl:
      name: net.ipv6.route.flush
      value: '1'
      sysctl_set: true
  when: ansible_virtualization_type != "docker"

- name: restart auditd
  ansible.builtin.service:
      name: auditd
      state: restarted
  when:
      - not ubtu20cis_skip_for_travis
  tags:
      - skip_ansible_lint

- name: restart syslog service
  ansible.builtin.systemd:
      name: "{{ ubtu20cis_syslog_service }}"
      state: restarted

- name: restart journal-upload
  ansible.builtin.systemd:
      name: systemd-journal-upload
      state: restarted

- name: restart sshd
  ansible.builtin.systemd:
      name: sshd
      state: restarted

- name: reload gdm
  ansible.builtin.shell: dpkg-reconfigure gdm3

- name: change_requires_reboot
  ansible.builtin.set_fact:
      change_requires_reboot: true
