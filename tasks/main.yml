---

- name: Check OS version and family
  ansible.builtin.assert:
      that: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version is version_compare('20', '==')
      msg: "This role can only be run against Ubuntu 20. {{ ansible_distribution }} {{ ansible_distribution_major_version }} is not supported."
  tags:
      - always

- name: Check ansible version
  ansible.builtin.assert:
      that: ansible_version.full is version_compare(min_ansible_version, '>=')
      fail_msg: "You must use Ansible {{ min_ansible_version }} or greater"
      success_msg: "This role is running a supported version of ansible {{ ansible_version.full }} >= {{ min_ansible_version }}"
  tags:
      - always

- name: Ensure grub password has been changed
  ansible.builtin.assert:
      that:
          - '"ChangeMe" not in ubtu20cis_bootloader_password_hash'
          - '"grub.pbkdf2.sha512.1000" in ubtu20cis_bootloader_password_hash'
      fail_msg: "The default grub password has not been changed"
  when:
      - ubtu20cis_set_grub_user_password
      - ubtu20cis_rule_1_4_2

- name: Ensure root password has been changed
  ansible.builtin.assert:
      that:
          - '"$6$this_is_needs_to_be_changed" not in ubtu20cis_root_pw'
          - '"$6$" in ubtu20cis_root_pw'
      fail_msg: "The root password set does not pass checks"
  when:
      - ubtu20cis_set_root_password
      - ubtu20cis_rule_1_4_3

#  This control should always run as this can pass on unintended issues.
- name: "Check password set for connecting user"
  block:
      - name: Capture current password state of connecting user"
        ansible.builtin.shell: "grep {{ ansible_env.SUDO_USER }} /etc/shadow | awk -F: '{print $2}'"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ansible_user_password_set

      - name: "Assert that password set for {{ ansible_env.SUDO_USER }} and account not locked"
        ansible.builtin.assert:
            that: ansible_user_password_set.stdout | length != 0 and ansible_user_password_set.stdout != "!!"
            fail_msg: "You have {{ sudo_password_rule }} enabled but the user = {{ ansible_env.SUDO_USER }} has no password set - It can break access"
            success_msg: "You have a password set for sudo user {{ ansible_env.SUDO_USER }}"
        vars:
            sudo_password_rule: ubtu20cis_rule_4_3_4  # pragma: allowlist secret
  when:
      - ubtu20cis_rule_4_3_4
      - ansible_env.SUDO_USER is defined
  tags:
      - always

- name: Setup rules if container
  block:
      - name: Discover and set container variable if required
        ansible.builtin.set_fact:
            system_is_container: true

      - name: Load variable for container
        ansible.builtin.include_vars:
            file: "{{ container_vars_file }}"

      - name: Output if discovered is a container
        ansible.builtin.debug:
            msg: system has been discovered as a container
        when:
            - system_is_container
  when:
      - ansible_connection == 'docker' or
        ansible_virtualization_type in ["docker", "lxc", "openvz", "podman", "container"]
  tags:
      - container_discovery
      - always

- name: Import preliminary tasks
  ansible.builtin.import_tasks:
      file: prelim.yml
  tags:
      - prelim_tasks
      - run_audit

- name: Include audit specific variables
  ansible.builtin.include_vars: audit.yml
  when:
      - run_audit or audit_only
      - setup_audit
  tags:
      - setup_audit
      - run_audit

- name: Include pre-remediation audit tasks
  ansible.builtin.import_tasks: pre_remediation_audit.yml
  when:
      - run_audit or audit_only
      - setup_audit
  tags:
      - run_audit

- name: Run parse /etc/passwd
  ansible.builtin.import_tasks:
      file: parse_etc_password.yml
  when:
      - ubtu20cis_section5_patch or
        ubtu20cis_section6_patch

- name: Gather the package facts
  ansible.builtin.package_facts:
      manager: auto
  tags:
      - always

- name: Include section 1 patches
  ansible.builtin.import_tasks:
      file: section_1/main.yml
  when:
      - ubtu20cis_section1_patch
  tags:
      - section1

- name: Include section 2 patches
  ansible.builtin.import_tasks:
      file: section_2/main.yml
  when:
      - ubtu20cis_section2_patch
  tags:
      - section2

- name: Include section 3 patches
  ansible.builtin.import_tasks:
      file: section_3/main.yml
  when:
      - ubtu20cis_section3_patch
  tags:
      - section3

- name: Include section 4 patches
  ansible.builtin.import_tasks:
      file: section_4/main.yml
  when:
      - ubtu20cis_section4_patch
  tags:
      - section4

- name: Include section 5 patches
  ansible.builtin.import_tasks:
      file: section_5/main.yml
  when:
      - ubtu20cis_section5_patch
  tags:
      - section5

- name: Include section 6 patches
  ansible.builtin.import_tasks:
      file: section_6/main.yml
  when:
      - ubtu20cis_section6_patch
  tags:
      - section6

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: run post remediation tasks
  ansible.builtin.import_tasks:
      file: post.yml
  tags:
      - post_tasks
      - always

- name: Run post audit
  ansible.builtin.import_tasks:
      file: post_remediation_audit.yml
  when:
      - run_audit

- name: Show Audit Summary
  ansible.builtin.debug:
      msg: "{{ audit_results.split('\n') }}"
  when:
      - run_audit
  tags:
      - run_audit

- name: Output Warning count and control IDs affected
  ansible.builtin.debug:
      msg: "You have {{ warn_count }} warning(s) that require investigating that are related to the following benchmark ID(s) {{ warn_control_list }}"
  tags:
      - always
