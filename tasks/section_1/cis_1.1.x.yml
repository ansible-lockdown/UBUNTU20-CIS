---

- name: "1.1.2 | PATCH | Ensure /tmp is configured"
  ansible.posix.mount:
      path: /tmp
      src: /tmp
      state: mounted
      fstype: tmpfs
      opts: "{{ ubtu20cis_tmp_fstab_options }}"
  when:
      - ubtu20cis_rule_1_1_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.2
      - tmp

- name: |
    "1.1.3 | PATCH | Ensure nodev option set on /tmp partition"
    "1.1.4 | PATCH | Ensure nosuid option set on /tmp partition"
    "1.1.5 | PATCH | Ensure noexec option set on /tmp partition"
  ansible.posix.mount:
      name: /tmp
      src: /tmp
      state: present
      fstype: tmpfs
      opts: "{{ ubtu20cis_tmp_fstab_options }}"
  notify: remount tmp
  when:
      - ubtu20cis_rule_1_1_3 or
        ubtu20cis_rule_1_1_4 or
        ubtu20cis_rule_1_1_5
      # - ubtu20cis_vartmp['enabled']
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.3
      - rule_1.1.4
      - rule_1.1.5
      - tmp

- name: "1.1.6 | PATCH | Ensure /dev/shm is configured"
  ansible.posix.mount:
      name: /dev/shm
      src: /dev/shm
      state: mounted
      fstype: tmpfs
      opts: "{{ ubtu20cis_dev_shm_fstab_options }}"
  when:
      - ubtu20cis_rule_1_1_6
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.6
      - dev_shm

- name: |
    "1.1.7 | PATCH | Ensure nodev option set on /dev/shm partition"
    "1.1.8 | PATCH | Ensure nosuid option set on /dev/shm partition"
    "1.1.9 | PATCH | Ensure noexec option set on /dev/shm partition"
  ansible.posix.mount:
      name: /dev/shm
      src: /dev/shm
      state: present
      fstype: tmpfs
      opts: "{{ ubtu20cis_dev_shm_fstab_options }}"
  notify: remount dev_shm
  when:
      - ubtu20cis_rule_1_1_7 or
        ubtu20cis_rule_1_1_8 or
        ubtu20cis_rule_1_1_9
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.7
      - rule_1.1.8
      - rule_1.1.9
      - dev_shm

- name: "1.1.10 | AUDIT | Ensure separate partition exists for /var"
  block:
      - name: "1.1.10 | AUDIT | Ensure separate partition exists for /var | Warn if partition is absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.10 | AUDIT | Ensure separate partition exists for /var | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '1.1.10'
      required_mount: '/var'
  when:
      - "'/var' not in mount_names"
      - ubtu20cis_rule_1_1_10
  tags:
      - level2-server
      - level2-workstation
      - automated
      - audit
      - rule_1.1.10
      - var

- name: "1.1.11 | AUDIT | Ensure separate partition exists for /var/tmp"
  block:
      - name: "1.1.11 | AUDIT | Ensure separate partition exists for /var/tmp | Warn if partition is absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.11 | AUDIT | Ensure separate partition exists for /var/tmp | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '1.1.11'
      required_mount: '/var/tmp'
  when:
      - "'/var/tmp' not in mount_names"
      - ubtu20cis_rule_1_1_11
  tags:
      - level2-server
      - level2-workstation
      - automated
      - audit
      - rule_1.1.11
      - var/tmp

- name: |
    "1.1.12 | PATCH | Ensure /var/tmp partition includes the nodev option"
    "1.1.13 | PATCH | Ensure /var/tmp partition includes the nosuid option"
    "1.1.14 | PATCH | Ensure /var/tmp partition includes the noexec option"
  ansible.posix.mount:
      name: /var/tmp
      src: "{{ ubtu20cis_vartmp['source'] }}"
      state: present
      fstype: "{{ ubtu20cis_vartmp['fstype'] }}"
      opts: "{{ ubtu20cis_vartmp['opts'] }}"
  notify: remount var_tmp
  when:
      - ubtu20cis_rule_1_1_12 or
        ubtu20cis_rule_1_1_13 or
        ubtu20cis_rule_1_1_14
      - ubtu20cis_vartmp['enabled']
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.12
      - rule_1.1.13
      - rule_1.1.14
      - var/tmp

- name: "1.1.15 | AUDIT | Ensure separate partition exists for /var/log"
  block:
      - name: "1.1.15 | AUDIT | Ensure separate partition exists for /var/log | Warn if partition is absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.15 | AUDIT | Ensure separate partition exists for /var/log | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '1.1.15'
      required_mount: '/var/log'
  when:
      - "'/var/log' not in mount_names"
      - ubtu20cis_rule_1_1_15
  tags:
      - level2-server
      - level2-workstation
      - automated
      - audit
      - rule_1.1.15
      - var/log

- name: "1.1.16 | AUDIT | Ensure separate partition exists for /var/log/audit"
  block:
      - name: "1.1.16 | AUDIT | Ensure separate partition exists for /var/log/audit | Warn if partition is absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.16 | AUDIT | Ensure separate partition exists for /var/log/audit | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '1.1.6.1'
      required_mount: '/var/log/audit'
  when:
      - "'/var/log/audit' not in mount_names"
      - ubtu20cis_rule_1_1_16
  tags:
      - level2-server
      - level2-workstation
      - automated
      - audit
      - var/log/audit

- name: "1.1.17 | AUDIT | Ensure separate partition exists for /home"
  block:
      - name: "1.1.17 | AUDIT | Ensure separate partition exists for /home | Warn if partition is absent"
        ansible.builtin.debug:
            msg: "Warning!! {{ required_mount }} doesn't exist. This is a manual task"

      - name: "1.1.17 | AUDIT | Ensure separate partition exists for /home | Present"
        ansible.builtin.import_tasks: warning_facts.yml
  vars:
      warn_control_id: '1.1.17'
      required_mount: '/home'
  when:
      - "'/home' not in mount_names"
      - ubtu20cis_rule_1_1_17
  tags:
      - level2-server
      - level2-workstation
      - automated
      - audit
      - /home

- name: "1.1.18 | PATCH | Ensure /home partition includes the nodev option"
  ansible.posix.mount:
      name: "/home"
      src: "{{ item.device }}"
      state: mounted
      fstype: "{{ item.fstype }}"
      opts: "nodev"
  with_items: "{{ ansible_mounts }}"
  loop_control:
      label: "{{ item.device }}"
  when:
      - ubtu20cis_rule_1_1_18
      - item.mount == "/home"
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.18
      - /home

- name: "1.1.19 | AUDIT | Ensure nodev option set on removable media partitions"
  ansible.builtin.debug:
      msg: "Warning!!!! Not relevant control"
  when:
      - ubtu20cis_rule_1_1_19
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_1.1.19
      - removable_media

- name: "1.1.20 | AUDIT | Ensure nosuid option set on removable media partitions"
  ansible.builtin.debug:
      msg: "Warning!!!! Not relevant control"
  when:
      - ubtu20cis_rule_1_1_20
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_1.1.20
      - removable_media

- name: "1.1.21 | AUDIT | Ensure noexec option set on removable media partitions"
  ansible.builtin.debug:
      msg: "Warning!!!! Not relevant control"
  when:
      - ubtu20cis_rule_1_1_21
  tags:
      - level1-server
      - level1-workstation
      - manual
      - audit
      - rule_1.1.21
      - removable_media

- name: "1.1.22 | PATCH | Ensure sticky bit is set on all world-writable directories"
  block:
      - name: "1.1.22 | PATCH | Ensure sticky bit is set on all world-writable directories"
        ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null
        changed_when: false
        register: ubtu20cis_1_1_22_sticky

      - name: "1.1.22 | PATCH | Ensure sticky bit is set on all world-writable directories"
        ansible.builtin.shell: df --local -P | awk '{if (NR!=1) print $6}' | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs -I '{}' chmod a+t '{}'
        failed_when: ubtu20cis_1_1_22_status.rc > 0
        check_mode: false
        register: ubtu20cis_1_1_22_status
        when: ubtu20cis_1_1_22_sticky.stdout | length > 0
  when:
      - ubtu20cis_rule_1_1_22
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_1.1.22
      - sticky_bit

- name: "1.1.23 | PATCH | Disable Automounting"
  ansible.builtin.service:
      name: autofs
      state: stopped
      enabled: false
  when:
      - ubtu20cis_rule_1_1_23
      - ubtu20cis_autofs_service_status.stdout == "loaded"
      - not ubtu20cis_allow_autofs
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_1.1.23
      - automounting

- name: "1.1.24 | PATCH | Disable USB Storage"
  block:
      - name: "1.1.24 | PATCH | Disable USB Storage | Set modprobe config"
        ansible.builtin.lineinfile:
            path: /etc/modprobe.d/usb_storage.conf
            regexp: '^install usb-storage'
            line: 'install usb-storage /bin/true'
            create: true

      - name: "1.1.24 | PATCH | Disable USB Storage | Remove usb-storage module"
        community.general.modprobe:
            name: usb-storage
            state: absent
        when: ansible_connection != 'docker'
  when:
      - ubtu20cis_rule_1_1_24
      - not ubtu20cis_allow_usb_storage
  tags:
      - level1-server
      - level2-workstation
      - automated
      - patch
      - rule_1.1.24
      - usb_storage
