---
- name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords"
  block:
      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Get users not using shadowed passwords"
        ansible.builtin.shell: awk -F':' '($2 != "x" ) { print $1}' /etc/passwd
        changed_when: false
        failed_when: false
        register: ubtu20cis_6_2_1_nonshadowed_users

      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Alert on findings"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have users that are not using a shadowed password. Please convert the below accounts to use a shadowed password"
                - "{{ ubtu20cis_6_2_1_nonshadowed_users.stdout_lines }}"

      - name: "6.2.1 | AUDIT | Ensure accounts in /etc/passwd use shadowed passwords | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - ubtu20cis_6_2_1_nonshadowed_users.stdout | length > 0
  vars:
      warn_control_id: '6.2.1'
  when:
      - ubtu20cis_rule_6_2_1
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.1
      - user_accounts

- name: "6.2.2 | PATCH | Ensure /etc/shadow password fields are not empty "
  block:
      - name: "6.2.2 | AUDIT | Ensure /etc/shadow password fields are not empty  | Find users with no password"
        ansible.builtin.shell: awk -F":" '($2 == "" ) { print $1 }' /etc/shadow
        changed_when: false
        check_mode: false
        register: ubtu20cis_6_2_2_empty_password_acct

      - name: "6.2.2 | PATCH | Ensure /etc/shadow password fields are not empty  | Lock users with empty password"
        ansible.builtin.user:
            name: "{{ item }}"
            password_lock: true
        with_items:
            - "{{ ubtu20cis_6_2_2_empty_password_acct.stdout_lines }}"
        when: ubtu20cis_6_2_2_empty_password_acct.stdout | length > 0
  when:
      - ubtu20cis_rule_6_2_2
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.2
      - user
      - permissions

- name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group"
  block:
      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Check /etc/passwd entries"
        ansible.builtin.shell: pwck -r | grep 'no group' | awk '{ gsub("[:\47]",""); print $2}'
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_3_passwd_gid_check

      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Print warning about users with invalid GIDs missing GID entries in /etc/group"
        ansible.builtin.debug:
            msg: "Warning!! The following users have non-existent GIDs (Groups): {{ ubtu20cis_6_2_3_passwd_gid_check.stdout_lines | join (', ') }}"
        when: ubtu20cis_6_2_3_passwd_gid_check.stdout | length > 0

      - name: "6.2.3 | AUDIT | Ensure all groups in /etc/passwd exist in /etc/group | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu20cis_6_2_3_passwd_gid_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.3'
  when:
      - ubtu20cis_rule_6_2_3
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.3
      - groups

- name: "6.2.4 | PATCH | Ensure shadow group is empty"
  block:
      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | check users in group"
        ansible.builtin.getent:
            database: group
            split: ':'
            key: shadow

      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | check users in group"
        ansible.builtin.debug:
            msg: "Warning!! - You have users in the shadow group"
        when: getent_group.shadow[2] | length > 0

      - name: "6.2.4 | AUDIT | Ensure shadow group is empty | check users in group"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: getent_group.shadow[2] | length > 0
  vars:
      warn_control_id: '6.2.4'
  when:
      - ubtu20cis_rule_6_2_4
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.4
      - user

- name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist"
  block:
      - name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist | Check for duplicate UIDs"
        ansible.builtin.shell: "pwck -r | awk -F: '{if ($3 in uid) print $1 ; else uid[$3]}' /etc/passwd"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_5_user_uid_check

      - name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu20cis_6_2_5_user_uid_check.stdout | length > 0

      - name: "6.2.5 | AUDIT | Ensure no duplicate UIDs exist | Print warning about users with duplicate UIDs"
        ansible.builtin.debug:
            msg: "Warning!! The following users have UIDs that are duplicates: {{ ubtu20cis_6_2_5_user_uid_check.stdout_lines }}"
        when: ubtu20cis_6_2_5_user_uid_check.stdout | length > 0
        vars:
            warn_control_id: '6.2.5'
  when:
      - ubtu20cis_rule_6_2_5
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.5
      - user

- name: "6.2.6 | AUDIT | Ensure no duplicate user names exist"
  block:
      - name: "6.2.6 | AUDIT | Ensure no duplicate user names exist | Check for duplicate User Names"
        ansible.builtin.shell: "pwck -r | awk -F: '{if ($1 in users) print $1 ; else users[$1]}' /etc/passwd"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_6_user_username_check

      - name: "6.2.6 | AUDIT | Ensure no duplicate user names exist | Print warning about users with duplicate User Names"
        ansible.builtin.debug:
            msg: "Warning!! The following user names are duplicates: {{ ubtu20cis_6_2_6_user_username_check.stdout_lines }}"
        when: ubtu20cis_6_2_6_user_username_check.stdout | length > 0

      - name: "6.2.6 | AUDIT | Ensure no duplicate user names exist | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu20cis_6_2_6_user_username_check.stdout | length > 0
        vars:
            warn_control_id: '6.2.6'
  when:
      - ubtu20cis_rule_6_2_6
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.6
      - user

- name: "6.2.7 | AUDIT | Ensure no duplicate user names exist"
  block:
      - name: "6.2.7 | AUDIT | Ensure no duplicate user names exist | Check for duplicate User Names"
        ansible.builtin.shell: "pwck -r | awk -F: '{if ($1 in users) print $1 ; else users[$1]}' /etc/passwd"
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_7_user_username_check

      - name: "6.2.7 | AUDIT | Ensure no duplicate user names exist | Print warning about users with duplicate User Names"
        ansible.builtin.debug:
            msg: "Warning!! The following user names are duplicates: {{ ubtu20cis_6_2_7_user_username_check.stdout_lines }}"
        when: ubtu20cis_6_2_7_user_username_check.stdout | length > 0

      - name: "6.2.7 | AUDIT | Ensure no duplicate user names exist | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu20cis_6_2_7_user_username_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.7'
  when:
      - ubtu20cis_rule_6_2_7
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.7
      - user

- name: "6.2.8 | AUDIT | Ensure no duplicate group names exist"
  block:
      - name: "6.2.8 | AUDIT | Ensure no duplicate group names exist | Check for duplicate group names"
        ansible.builtin.shell: 'getent passwd | cut -d: -f1 | sort -n | uniq -d'
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_8_group_group_check

      - name: "6.2.8 | AUDIT | Ensure no duplicate group names exist | Print warning about users with duplicate group names"
        ansible.builtin.debug:
            msg: "Warning!! The following group names are duplicates: {{ ubtu20cis_6_2_8_group_group_check.stdout_lines }}"
        when: ubtu20cis_6_2_8_group_group_check.stdout | length > 0

      - name: "6.2.8 | AUDIT | Ensure no duplicate group names exist | Set warning count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu20cis_6_2_8_group_group_check.stdout | length > 0
  vars:
      warn_control_id: '6.2.8'
  when:
      - ubtu20cis_rule_6_2_8
  tags:
      - level1-server
      - level1-workstation
      - automated
      - audit
      - rule_6.2.8
      - groups

- name: "6.2.9 | PATCH | Ensure root PATH Integrity"
  block:
      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Determine empty value"
        ansible.builtin.shell: 'echo $PATH | grep ::'
        changed_when: false
        failed_when: ubtu20cis_rule_6_2_9_path_colon.rc == 0
        check_mode: false
        register: ubtu20cis_rule_6_2_9_path_colon

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Determin colon end"
        ansible.builtin.shell: 'echo $PATH | grep :$'
        changed_when: false
        failed_when: ubtu20cis_rule_6_2_9_path_colon_end.rc == 0
        check_mode: false
        register: ubtu20cis_rule_6_2_9_path_colon_end

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Determine dot in path"
        ansible.builtin.shell: "/bin/bash --login -c 'env | grep ^PATH=' | sed -e 's/PATH=//' -e 's/::/:/' -e 's/:$//' -e 's/:/\\n/g'"
        changed_when: false
        failed_when: '"." in ubtu20cis_rule_6_2_9_dot_in_path.stdout_lines'
        check_mode: false
        register: ubtu20cis_rule_6_2_9_dot_in_path

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Alert on empty value, colon end, and dot in path"
        ansible.builtin.debug:
            msg:
                - "The following paths have an empty value: {{ ubtu20cis_rule_6_2_9_path_colon.stdout_lines }}"
                - "The following paths have colon end: {{ ubtu20cis_rule_6_2_9_path_colon_end.stdout_lines }}"
                - "The following paths have a dot in the path: {{ ubtu20cis_rule_6_2_9_dot_in_path.stdout_lines }}"

      - name: "6.2.9 | PATCH | Ensure root PATH Integrity | Determine rights and owner"
        ansible.builtin.file:
            path: "{{ item }}"
            follow: true
            state: directory
            owner: root
            mode: 'o-w,g-w'
        with_items: "{{ ubtu20cis_rule_6_2_9_dot_in_path.stdout_lines }}"

      - name: "6.2.9 | AUDIT | Ensure root PATH Integrity | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when: ubtu20cis_rule_6_2_9_dot_in_path.stdout | length > 0
        vars:
            warn_control_id: '6.2.9'
  when:
      - ubtu20cis_rule_6_2_9
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.9
      - user
      - root
      - notimplemented

- name: "6.2.10 | PATCH | Ensure root is the only UID 0 account"
  block:
      - name: "6.2.10 | AUDIT | Ensure root is the only UID 0 account | Get non-root users with UID of 0"
        ansible.builtin.shell: awk -F":" '($3 == 0 && $1 != \"root\") {i++;print $1 }' /etc/passwd
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_10_uid_0_notroot

      - name: "6.2.10 | PATCH | Ensure root is the only UID 0 account | Lock UID 0 users"
        ansible.builtin.user:
            name: "{{ item }}"
            password_lock: true
        with_items:
            - "{{ ubtu20cis_6_2_10_uid_0_notroot.stdout_lines }}"
        when:
            - ubtu20cis_disruption_high
            - ubtu20cis_6_2_10_uid_0_notroot.stdout | length > 0

      - name: "6.2.10 | AUDIT | Ensure root is the only UID 0 account | Alert about accounts disruption high"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have non-root users with a UID of 0 and ubtu20cis_disruption_high enabled"
                - "This means the following accounts were password locked and will need to have the UID's manually adjusted"
                - "{{ ubtu20cis_6_2_10_uid_0_notroot.stdout_lines }}"
        when:
            - ubtu20cis_disruption_high
            - ubtu20cis_6_2_10_uid_0_notroot.stdout | length > 0

      - name: "6.2.10 | AUDIT | Ensure root is the only UID 0 account | Warn Count"
        ansible.builtin.import_tasks:
            file: warning_facts.yml
        when:
            - ubtu20cis_disruption_high
            - ubtu20cis_6_2_10_uid_0_notroot.stdout | length > 0

      - name: "6.2.10 | AUDIT | Ensure root is the only UID 0 account | Alert about accounts disruption low"
        ansible.builtin.debug:
            msg:
                - "Warning!! You have non-root users with a UID of 0 and ubtu18cis_disruption_high disabled"
                - "This means no action was taken, you will need to have the UID's of the users below manually adjusted"
                - "{{ ubtu20cis_6_2_10_uid_0_notroot.stdout_lines }}"
        when:
            - not ubtu20cis_disruption_high
            - ubtu20cis_6_2_10_uid_0_notroot.stdout | length > 0
  vars:
      warn_control_id: '6.2.10'
  when:
      - ubtu20cis_rule_6_2_10
  tags:
      - level1-server
      - level1-workstation
      - automated
      - scored
      - rule_6.2.10
      - user
      - root

- name: "6.2.11 | PATCH | Ensure local interactive user home directories exist"
  block:
      - name: "6.2.11 | PATCH | Ensure local interactive user home directories exist | Create dir if absent"
        ansible.builtin.file:
            path: "{{ item.dir }}"
            state: directory
            owner: "{{ item.id }}"
            group: "{{ item.gid }}"
            mode: "0750"
        register: ubtu20cis_6_2_11_home_dir
        loop: "{{ ubtu20cis_passwd  | selectattr('uid', '>=', min_int_uid | int ) | selectattr('uid', '<=', max_int_uid | int ) | list }}"
        loop_control:
            label: "{{ item.id }}"

      # set default ACLs so the homedir has an effective umask of 0027
      - name: "6.2.11 | PATCH | Ensure local interactive user home directories exist | Set group ACL"
        ansible.posix.acl:
            path: "{{ item }}"
            default: true
            etype: group
            permissions: rx
            state: present
        loop: "{{ interactive_users_home.stdout_lines }}"
        when: not system_is_container

      - name: "6.2.11 | PATCH | Ensure local interactive user home directories exist | Set other ACL"
        ansible.posix.acl:
            path: "{{ item }}"
            default: true
            etype: other
            permissions: 0
            state: present
        loop: "{{ interactive_users_home.stdout_lines }}"
        when: not system_is_container
  when:
      - ubtu20cis_rule_6_2_11
  tags:
      - level1-server
      - level1-workstation
      - patch
      - users
      - rule_6.2.11

- name: "6.2.12 | PATCH | Ensure local interactive user dot files access is configured"
  block:
      - name: "6.2.12 | AUDIT | Ensure local interactive user dot files access is configured | Check for dot files"
        ansible.builtin.shell: find /home/ -name "\.*" -perm /g+w,o+w
        changed_when: false
        failed_when: false
        check_mode: false
        register: ubtu20cis_6_2_12_audit

      - name: "6.2.12 | PATCH | Ensure local interactive user dot files access is configured | Changes files if dot configured"
        ansible.builtin.file:
            path: '{{ item }}'
            mode: go-w
        with_items: "{{ ubtu20cis_6_2_12_audit.stdout_lines }}"
        when:
            - ubtu20cis_6_2_12_audit.stdout | length > 0

      - name: "6.2.12 | PATCH | Ensure local interactive user dot files access is configured | Ensure no users have .netrc files"
        ansible.builtin.file:
            dest: "~{{ item }}/.netrc"
            state: absent
        with_items:
            - "{{ ubtu20cis_users.stdout_lines }}"

      - name: "6.2.12 | PATCH | Ensure local interactive user dot files access is configured | Ensure no users have .forward files"
        ansible.builtin.file:
            dest: "~{{ item }}/.forward"
            state: absent
        with_items:
            - "{{ ubtu20cis_users.stdout_lines }}"

      - name: "6.2.12 | PATCH | Ensure local interactive user dot files access is configured | Ensure no users have .rhostfiles"
        ansible.builtin.file:
            dest: "~{{ item }}/.rhost"
            state: absent
        with_items:
            - "{{ ubtu20cis_users.stdout_lines }}"
  when:
      - ubtu20cis_rule_6_2_12
      - ubtu20cis_disruption_high
  tags:
      - level1-server
      - level1-workstation
      - automated
      - patch
      - rule_6.2.12
      - user
